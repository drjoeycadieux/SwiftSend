// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A flow that recommends an emoji based on the transfer amount.
 *
 * - emojiRecommendation - A function that handles the emoji recommendation process.
 * - EmojiRecommendationInput - The input type for the emojiRecommendation function.
 * - EmojiRecommendationOutput - The return type for the emojiRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EmojiRecommendationInputSchema = z.object({
  amount: z.number().describe('The amount of money being transferred.'),
});
export type EmojiRecommendationInput = z.infer<typeof EmojiRecommendationInputSchema>;

const EmojiRecommendationOutputSchema = z.object({
  emoji: z.string().describe('The recommended emoji for the transfer.'),
  reason: z.string().describe('The reason for recommending the emoji.'),
});
export type EmojiRecommendationOutput = z.infer<typeof EmojiRecommendationOutputSchema>;

export async function emojiRecommendation(input: EmojiRecommendationInput): Promise<EmojiRecommendationOutput> {
  return emojiRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'emojiRecommendationPrompt',
  input: {schema: EmojiRecommendationInputSchema},
  output: {schema: EmojiRecommendationOutputSchema},
  prompt: `You are an emoji recommendation expert.

  Based on the transfer amount, recommend an emoji to the user.

  If the amount is high, recommend celebratory emojis.
  If the amount is low, recommend emojis suggesting sympathy.

  Amount: {{{amount}}}

  Respond using JSON format.
  `,
});

const emojiRecommendationFlow = ai.defineFlow(
  {
    name: 'emojiRecommendationFlow',
    inputSchema: EmojiRecommendationInputSchema,
    outputSchema: EmojiRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
